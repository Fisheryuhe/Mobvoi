#!/usr/bin/python
#encoding: utf-8

import json
import urllib2
from json import JSONEncoder

class BoardingPort(object):

    def __init__(self):
        pass

    def get_process_flight_info(self,flight_no,time):
        url = "http://localhost:8160/board_port?flight_no="+flight_no+"&time="+time
        request = urllib2.Request(url)
        response = urllib2.urlopen(request)
        result = response.read()
        res_dict = {}
        d = json.loads(result)
        airport = unicode("机场",'utf-8')
        res_dict["flight_no"] = flight_no
        res_dict["flight_plan_takeoff_time"] = ""
        res_dict["flight_actual_takeoff_time"] = ""
        res_dict["flight_plan_land_time"] = ""
        res_dict["flight_actual_land_time"] = ""
        res_dict["flight_to_city"] = ""
        res_dict["flight_to_airport"] = ""
        res_dict["flight_to_tower"] = ""
        res_dict["flight_checkin_counter"] = ""
        res_dict["flight_carousel"] = ""
        res_dict["flight_boarding_gate"] = ""
        res_dict["flight_type"] = ""
        res_dict["flight_takeoff_late_time"] = ""
        flag = False
        if "flight_name" in d.keys():
            res_dict["flight_name"] = d["flight_name"]
        if "from" in d.keys() and d["from"] is not None:
             if len(d["from"][0]) > 3:
                stra = d["from"][0].split(" ")
                res_dict["flight_from_city"] = stra[0]
                res_dict["flight_from_airport"] = stra[1]
                res_dict["flight_from_tower"] = stra[1].split(airport,1)[1]
                flag = True
        if "to" in d.keys() and d["to"] is not None:
            if len(d["to"][0]) > 3:
                stra = d["to"][0].split(" ")
                res_dict["flight_to_city"] = stra[0]
                res_dict["flight_to_airport"] = stra[1]
                res_dict["flight_to_tower"] = stra[1].split(airport, 1)[1]
                flag = True
        if "flight_time" in d.keys() and d["flight_time"] is not None:
            plan = unicode("计划",'utf-8')
            takeoff = unicode("起飞",'utf-8')
            arrive = unicode("到达",'utf-8')
            if len(d["flight_time"][0]) > 3 :
                stra = d["flight_time"][0].split(" ")
                res_dict["flight_plan_takeoff_time"] = stra[1]
                res_dict["flight_actual_takeoff_time"] = stra[0].split(plan, 1)[0].split(takeoff, 1)[1]
            if len(d["flight_time"][2]) >3 :
                stra = d["flight_time"][2].split(" ")
                res_dict["flight_plan_land_time"] =  stra[1]
                res_dict["flight_actual_land_time"] = stra[0].split(plan, 1)[0].split(arrive, 1)[1]

            res_dict["flight_status"] = d["flight_time"][1]
        if "port_info" in d.keys() and d["port_info"] is not None:
            res_dict["flight_checkin_counter"] = d["port_info"][0]
            res_dict["flight_carousel"] = d["port_info"][-1]
            res_dict["flight_boarding_gate"] = d["port_info"][1]
        print JSONEncoder().encode(res_dict).decode("unicode-escape")
        return flag

    def read_flight_no_from_file(self):
        fp = open("flight_None","a")
        a = 0
        for line in open("flight_no_null.txt"):
            line = line.strip("\r\n")
            print line
            print self.get_process_flight_info(line,"20160504")
            if self.get_process_flight_info(line,"20160504") is True:
                pass
            else:
                fp.write(line + "\r\n")
                a = a + 1
        print a

if __name__ == "__main__":
    board_port = BoardingPort()
    board_port.get_process_flight_info("MU5181","20160507")
    #board_port.get_process_flight_info("3U2222","20160504")
    #board_port.read_flight_no_from_file()

